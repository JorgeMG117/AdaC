//*****************************************************************
// File:   adac.jj
// Author: ...........
// Date:   ...........
// Coms:   Un tutorial sobre el análisis léxico con javacc
//         https://javacc.github.io/javacc/tutorials/token-manager.html
//*****************************************************************

options {
//   IGNORE_CASE = false;
//   COMMON_TOKEN_ACTION = false;
//   ...
	//DEBUG_PARSER = true;
}

PARSER_BEGIN(adac_4)
package traductor;

import java.util.*;
import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import lib.attributes.*;
import lib.errores.*;
import lib.tools.*;

import lib.tools.codeGeneration.CodeBlock;
import lib.tools.codeGeneration.PCodeInstruction.OpCode;
import lib.tools.codeGeneration.CGUtils;

public class adac_4 {

	//tabla de símbolos global
	static SymbolTable st;
	static SemanticFunctions sf;

	private static void initSymbolTable() {
		boolean b;
		String[] palsRes = {
	    	"var","const","escribir"
		};

		st = new SymbolTable(palsRes);
		//st.insertReservedWords(palsRes);

		//st.toString();
	}
	

    public static void main(String[] args) {
    	adac_4 parser;
		


    	try {
	    	if(args.length == 0) { //entrada desde stdin
				parser = new adac_4(System.in);
			}
			else { //entrada desde fichero en args[0]
	            parser = new adac_4(new java.io.FileInputStream(args[0])); 
			}
			initSymbolTable();
			sf = new SemanticFunctions(st);
			parser.programa(); //invoca símbolo inicial de la gramática
			//System.out.println(st.toString());
		} catch (java.io.FileNotFoundException e) {
			System.err.println ("Fichero " + args[0] + " no encontrado.");
		} catch (TokenMgrError e) {
        	System.err.println("LEX_ERROR: " + e.getMessage());
        } 
		catch (ParseException e){
			System.err.println("PARSE_ERROR: " + e.getMessage());
		}
		catch(Exception e) {
  			System.err.println("Finalizo traducción por detección de error no controlado: \n\t"
  				               + e.getMessage());
		}
    }
}
PARSER_END(adac_4)

TOKEN_MGR_DECLS:
{
	static void informacion(Token t, String tipo){
		System.out.println("(" + t.beginLine + "," + t.beginColumn + "): " + tipo + " \"" + t.image + "\"");
	}
}


//------------ descripción del AL
SKIP :
{
  	" "
|	"\t"
|	"\n"
|	"\r"
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "--" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> //Ojo si no hay final fichero pilla primero como operador
}



//<WithinComment> SKIP :
//{
// "\n" : DEFAULT
//}

TOKEN :
{
 	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
|	< #ALPHANUM: (<LETTER> | <DIGIT>) >

}
//TokenManagerdecs
TOKEN :
{
 	< tBEGIN: "begin" >
 		{
			//informacion(matchedToken, "inicio funcion");
 		}
|	< tBOOL: "boolean" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "declaracion boolean");
 		}
|	< tCHAR: "character" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "declaracion character");
 		}
|	< tINT: "integer" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "declaracion integer");
 		}
//constantes tipos
|	< tVINT: (<DIGIT>)+ >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "constante entera");
 		}
|	< tVCHAR: "'"(~["\n","\r"])"'" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "constante char");
 		}
|	< tTRUE: "true" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "constante bool true");
 		}
|	< tFALSE: "false" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "constante bool false");
 		}
|	< tVSTRING: "\""(~["\n","\r","\""])*"\"" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "constante string");
 		}
//simbolos
|	< tC: "," >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "simbolo coma");
 		}
|	< tPC: ";" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "simbolo punto y coma");
 		}
|	< tSBR: "(" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "simbolo parentesis abierto");
 		}
|	< tEBR: ")" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "simbolo parentesis cerrado");
 		}
|	< tISQBR: "[" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "simbolo corchete abierto");
 		}
|	< tESQBR: "]" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "simbolo corchete cerrado");
 		}
//logica
|	< tLESS: "<" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador mayor");
 		}
|	< tMORE: ">" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador menor");
 		}
|	< tLESSEQ: "<=" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador mayor o igual");
 		}
|	< tMOREEQ: ">=" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador menor o igual");
 		}
|	< tNOTEQ: "<>" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador igual");
 		}
|	< tASSIGN: ":=" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador asignacion");
 		}
|	< tEQ: "=" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador igual");
 		}
//aritmetica
|	< tNEG: "-" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador menos");
 		}
|	< tPOS: "+" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador mas");
 		}
|	< tMUL: "*" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador multiplicar");
 		}
|	< tDIV: "div" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador division");
 		}			
|	< tMOD: "mod" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador modulo");
 		}			  		 
//operaciones logicas
|	< tAND: "and" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "logica and");
 		}	
|	< tNOT: "not" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "logica not");
 		}	
|	< tOR: "or" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "logica or");
 		}	
//palabras reservadas en minusculas
|	< tPROC: "procedure" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "reservada procedure");
 		}
|	< tFUNCT: "function" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "reservada function");
 		}
|	< tRETURN: "return" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "reservada return");
 		}
|	< tVAL: "val" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "parametro por valor");
 		}
|	< tREF: "ref" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "parametro por referencia");
 		}
|	< tIS: "is" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "reservada is");
 		}
|	< tPUT: "put" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operacion put");
 		}
|	< tPUTL: "put_line" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operacion put_line");
 		}
|	< tSKIP: "skip_line" > 
		 {
			//mostrar la información pedida
			//informacion(matchedToken, "operacion skip_line");
		  }
|	< tGET: "get" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operacion get");
 		}
|	< tI2C: "int2char" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operacion int2char");
 		}
|	< tC2I: "char2int" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operacion char2int");
 		}
|	< tEND: "end" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "reservada end");
 		}
|	< tIF: "if" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "condicion if");
 		}
|	< tELSE: "else" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "condicion else");
 		}
|	< tWHILE: "while" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "bucle while");
 		}
|	< tDO: "do" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "reservada do");
 		}
|	< tTHEN: "then" >		{
 			//mostrar la información pedida
			//informacion(matchedToken, "reservada then");
 		}
//identificador
|	< tID: ("_"(<ALPHANUM>|<ALPHANUM>"_")* | <LETTER>("_"<ALPHANUM>|<ALPHANUM>)*("_")?) >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "identificador");
 		}

}

TOKEN:
{
	< tDEF: ~[] >		
		{
			System.out.println("ERROR LEXICO: (" + matchedToken.beginLine + "," + matchedToken.beginColumn + "): simbolo no reconocido: " + "<" + matchedToken.image + ">");			
		}
}


//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
/*	<tPROC>
	<tID>
	<tIS>
	declaracion_variables()
	declaracion_procs_funcs()
	bloque_sentencias()*/ 
void programa () : 
{
	Token t;
	Attributes at1 = new Attributes();
	Attributes at2 = new Attributes();
	
	CodeBlock cprog, cprodfun, cbloque;
	String etiq;
}
{
	<tPROC>
	t = <tID>
	<tIS>
	{
		sf.programa_1(t, at1);
		
		cprog = new CodeBlock();
		etiq = CGUtils.newLabel();
		CGUtils.memorySpaces[st.level] = 2; //ojo esta inicializacion
		cprog.addInst(OpCode.ENP, etiq);
		//cprog.addCode(cprocfun);
		cprog.addComment("Comienzo de " + t.image);
	}

	declaracion_variables()
	declaracion_procs_funcs(at1)
	{
		cprog.addBlock(at1.code);
	}
	bloque_sentencias(at2)

	{
		cprog.addLabel(etiq);
		cprog.addBlock(at2.code);
		cprog.addComment("Fin de "  + t.image);
		cprog.addInst(OpCode.LVP);

		System.out.println(cprog.toString());
		
		/*System.out.println("******************");
		System.out.println("Procesando " + at1.simbolo.name);
		System.out.println("******************");
		System.out.println(st.toString());*/
	}
	
}

//( declaracion() <tPC> )*
void declaracion_variables():
{
	Attributes at1 = new Attributes();
	//at1.parClass = Symbol.ParameterClass.NONE;//Constructor del atributes!!
}
{
	( declaracion(at1) <tPC> )*	
	//meter variables en la tabla
	/*{//Mejor meter en tabla de simbolos en declaracion!!
		for (int i=0;i<at1.parList.size();i++) {
			try{
				st.insertSymbol(at1.parList.get(i));
			}	
			catch (AlreadyDefinedSymbolException e) {
				ErrorSemantico.deteccion(e, token); //DE DONDE SACAMOS EL TOKEN????
			}
		}
	}*/
}

//tipo_variable() lista_vars()
void declaracion(Attributes at):
{
	
}
{
	at.type = tipo_variable() 
	lista_vars(at)//Opcion1: Meter aqui los simbolos en la tabla, sintetizar lista de ids !!
	
}

//<tINT> | <tCHAR> | <tBOOL>
Symbol.Types tipo_variable():
{

}
{
	<tINT> 
		{
			return Symbol.Types.INT;
		}
	| <tCHAR> 
		{
			return Symbol.Types.CHAR;
		}
	| <tBOOL>
		{
			return Symbol.Types.BOOL;
		}
}

//variable() ( <tC> variable() )*
void lista_vars(Attributes at):
{
}
{
	variable(at) ( <tC> variable(at) )*
}

/*
	LOOKAHEAD(2)
	<tID> <tISQBR> <tVINT> <tESQBR>
	| <tID>
*/
void variable(Attributes at)://Opcon2: pasar tipo a variable y meter a qui en tabla se simbolos !!
{
	Token t1, t2;
	//Attributes at1 = new Attributes();
	Symbol s = null;
}
{
	LOOKAHEAD(2)
	t1 = <tID> 
	<tISQBR> 
	t2 = <tVINT> 
	<tESQBR> 
	{
		//crear e instertar el simbolo
		s = new SymbolArray(t1.image, 0, Integer.parseInt(t2.image)-1,at.type,at.parClass);
		if(at.parClass == Symbol.ParameterClass.NONE){
			s.dir = CGUtils.memorySpaces[st.level] + 1;
			CGUtils.memorySpaces[st.level] += Integer.parseInt(t2.image);
			try{
				st.insertSymbol(s);
			}	
			catch (AlreadyDefinedSymbolException e) {
				ErrorSemantico.deteccion(e, t1); //DE DONDE SACAMOS EL TOKEN????
			}
		} else{at.parList.add(s);}
		
	}
	
	| t1 = <tID>
		{ //crear e insertar el simbolo
			if(at.type == Symbol.Types.INT){
				s = new SymbolInt(t1.image, at.parClass);
			}
			else if(at.type == Symbol.Types.CHAR){
				s = new SymbolChar(t1.image, at.parClass);
			}
			else{ //tp == Symbol.Types.BOOL
				s = new SymbolBool(t1.image, at.parClass);
			}
			//System.out.println(s.toString());
			if(at.parClass == Symbol.ParameterClass.NONE){
				CGUtils.memorySpaces[st.level]++;
				s.dir = CGUtils.memorySpaces[st.level];
				try{
					st.insertSymbol(s);
				}	
				catch (AlreadyDefinedSymbolException e) {
					ErrorSemantico.deteccion(e, t1); //DE DONDE SACAMOS EL TOKEN????
				}
			} else{at.parList.add(s);}
			
		}	
}

void declaracion_procs_funcs(Attributes at):
{

}
{
	( declaracion_proc_func(at) )*
}

/*(<tPROC> | <tFUNCT> tipo_variable())
	declaracion_proc_func2()
*/
void declaracion_proc_func(Attributes at):
{
	
	//Attributes at1 = new Attributes();
	Token t1;
	String etiq;
}
{
	(<tPROC> t1 = <tID> cabecera_proc(at, t1)
	| <tFUNCT> 
	{at.type = tipo_variable();}
	t1 = <tID> 
	cabecera_func(at, t1))
	{
		etiq = CGUtils.newLabel();
		at.code.addInst(OpCode.JMP, etiq);
	}

	declaracion_variables()
	declaracion_procs_funcs(at) //Ojito
	{
		at.code.addLabel(etiq);
	}
	bloque_sentencias(at)
	{
		/*System.out.println("******************");
		System.out.println("Procesando " + at1.simbolo.name);
		System.out.println("******************");
		System.out.println(st.toString());*/
		at.code.addInst(OpCode.CSF);
		st.removeBlock();
	}
	
}

/*
cabecera_proc_func()
declaracion_variables()
declaracion_procs_funcs()
bloque_sentencias()
*/
// void declaracion_proc_func2(Attributes at, Token t):
// {
	
// }
// {
// 	cabecera_proc_func(at, t)
// 	declaracion_variables()
// 	declaracion_procs_funcs() //Ojito
// 	bloque_sentencias(at)
// 	{
// 		System.out.println("******************");
// 		System.out.println("Procesando " + at.simbolo.name);
// 		System.out.println("******************");
// 		System.out.println(st.toString());
// 		st.removeBlock();
// 	}
// }

//<tID> <tSBR> (argumentos_proc_func())? <tEBR> <tIS>
void cabecera_proc(Attributes at, Token t):
{
	Attributes at1 = new Attributes();
	Symbol s = null;
}
{
	<tSBR> 
	(argumentos_proc_func(at1))? 
	<tEBR> 
	<tIS>
	{
		//at.nombre = t.image;
		try{
			s = new SymbolProcedure(t.image, at1.parList) ;
			s.label = CGUtils.newLabel();
			st.insertSymbol(s);
			at.code.addLabel(s.label);
		}
		catch (AlreadyDefinedSymbolException e) {
			ErrorSemantico.deteccion(e, t); //aqui un token??
		}
		
		at.simbolo = s;
		st.insertBlock();

		CGUtils.memorySpaces[st.level] = 2; 

		//Insertamos los argumentos en la tabla de simbolos
		for (int i=0;i<at1.parList.size();i++) {
			try{
				if(at1.parList.get(i).type == Symbol.Types.ARRAY && at1.parList.get(i).parClass == Symbol.ParameterClass.VAL){
					at1.parList.get(i).dir = CGUtils.memorySpaces[st.level] + 1;
					CGUtils.memorySpaces[st.level] += ((SymbolArray)at1.parList.get(i)).maxInd + 1;
				}
				else{
					CGUtils.memorySpaces[st.level]++;
					at1.parList.get(i).dir = CGUtils.memorySpaces[st.level];	
				}
				st.insertSymbol(at1.parList.get(i));			
			}
			catch (AlreadyDefinedSymbolException e) {
				//ErrorSemantico.deteccion(e, t1); //HABRIA QUE PONER ID DE ARGS????
			}
		}

		for (int i=at1.parList.size()-1; i >= 0; i--) {
			if(at1.parList.get(i).type == Symbol.Types.ARRAY && at1.parList.get(i).parClass == Symbol.ParameterClass.VAL){
				for(int j = ((SymbolArray)at1.parList.get(i)).maxInd; j >= 0; j--){
					at.code.addInst(OpCode.SRF, st.level - at1.parList.get(i).nivel, (int)at1.parList.get(i).dir + j);
					at.code.addInst(OpCode.ASGI);
				}
			}
			else{
				at.code.addInst(OpCode.SRF, st.level - at1.parList.get(i).nivel, (int)at1.parList.get(i).dir);
				at.code.addInst(OpCode.ASGI);
			}
		}
		
	}
}

void cabecera_func(Attributes at, Token t):
{
	Attributes at1 = new Attributes();
	Symbol s = null;
}
{
	<tSBR> 
	(argumentos_proc_func(at1))? 
	<tEBR> 
	<tIS>
	{
	
		try{
			s = new SymbolFunction(t.image, at1.parList, at.type);
			s.label = CGUtils.newLabel();
			st.insertSymbol(s);
			at.code.addLabel(s.label);
		}
		catch (AlreadyDefinedSymbolException e) {
			ErrorSemantico.deteccion(e, t); //aqui un token??
		}
		
		at.simbolo = s;
		st.insertBlock();

		CGUtils.memorySpaces[st.level] = 2;
		
		//Insertamos los argumentos en la tabla de simbolos
		for (int i=0;i<at1.parList.size();i++) {
			try{
				if(at1.parList.get(i).type == Symbol.Types.ARRAY && at1.parList.get(i).parClass == Symbol.ParameterClass.VAL){
					at1.parList.get(i).dir = CGUtils.memorySpaces[st.level] + 1;
					CGUtils.memorySpaces[st.level] += ((SymbolArray)at1.parList.get(i)).maxInd + 1;
				}
				else{
					CGUtils.memorySpaces[st.level]++;
					at1.parList.get(i).dir = CGUtils.memorySpaces[st.level];	
				}
				st.insertSymbol(at1.parList.get(i));			
			}
			catch (AlreadyDefinedSymbolException e) {
				//ErrorSemantico.deteccion(e, t1); //HABRIA QUE PONER ID DE ARGS????
			}
		}

		for (int i=at1.parList.size()-1; i >= 0; i--) {
			if(at1.parList.get(i).type == Symbol.Types.ARRAY && at1.parList.get(i).parClass == Symbol.ParameterClass.VAL){
				for(int j = ((SymbolArray)at1.parList.get(i)).maxInd; j >= 0; j--){
					at.code.addInst(OpCode.SRF, st.level - at1.parList.get(i).nivel, (int)at1.parList.get(i).dir + j);
					at.code.addInst(OpCode.ASGI);
				}
			}
			else{
				at.code.addInst(OpCode.SRF, st.level - at1.parList.get(i).nivel, (int)at1.parList.get(i).dir);
				at.code.addInst(OpCode.ASGI);
			}
		}

	}
}

/*	(<tREF> | <tVAL>)
	declaracion()
	(<tPC> (<tREF> | <tVAL>) declaracion())*/
void argumentos_proc_func(Attributes at1): 
{
	
}
{
	(<tREF> 
	{at1.parClass = Symbol.ParameterClass.REF;}
	| <tVAL>
	{at1.parClass = Symbol.ParameterClass.VAL;})


	declaracion(at1)
	(<tPC> 
	
	(<tREF> 
	{at1.parClass = Symbol.ParameterClass.REF;}
	| <tVAL> 
	{at1.parClass = Symbol.ParameterClass.VAL;}) 
	declaracion(at1))*
}


//...
void bloque_sentencias(Attributes at):
{

}
{
	< tBEGIN> 
	lista_instrucciones(at)
	< tEND >
}

void instruccion(Attributes at):
{
	//Attributes at1 = new Attributes();
}
{
	try{
		inst_escribir(at) <tPC> 
		| inst_escribir_linea(at) <tPC> 
		| inst_return(at) <tPC> 
		| inst_saltar_linea(at) <tPC> 
		| inst_leer(at) <tPC>
		| inst_iteracion(at)
		| inst_seleccion(at)
		| LOOKAHEAD(2)
			inst_invoc_proc(at) <tPC> 
		| inst_asignacion(at) <tPC> 
	} catch (ParseException e) {
		Set<Integer> conjSinc = infoParseException(e);
		conjSinc.add(tPC);
		recuperacionPanico(e.currentToken.next, conjSinc);
	}
	
	/*{
		at.listaSize.clear();
		at.listaTipo.clear();
		at.listaCode.clear();
	}*/
}

//<tID> <tSBR> lista_cero_o_mas_exps(t) <tEBR>
void inst_invoc_proc(Attributes at): 
{
	Token t;
	Attributes at1 = new Attributes();
	at1.indice = 0;
}
{
	//funcion( )
	t = <tID> 
	{
		sf.inst_invoc_proc_1(t, at1);
		at1.esLlamada = true;
	}
	<tSBR> lista_cero_o_mas_exps(at1) <tEBR> 
	{
		
		sf.inst_invoc_proc_2(at1);
		at.code.addBlock(at1.code);
		//at1.esLlamada = false;
		//En at1 tendremos lista de argumentos, apilamos
		at.code.addOSFInst(CGUtils.memorySpaces[st.level] + 1, st.level - at1.simbolo.nivel, at1.simbolo.label);
	}
	
	
}

void lista_instrucciones(Attributes at):
{

}
{
	(instruccion(at))*
}

void inst_seleccion(Attributes at):
{
	Attributes at1 = new Attributes();
	String etiq, etiq2;
}
{
	try {
		<tIF> expresion(at1) <tTHEN>
		{	
			at.code.addBlock(at1.code);
			etiq = CGUtils.newLabel();
			at.code.addInst(OpCode.JMF, etiq);					
		}
		lista_instrucciones(at)
		{
			sf.inst_seleccion_1(at1);
			etiq2 = CGUtils.newLabel();
			at.code.addInst(OpCode.JMP, etiq2);	
			at.code.addLabel(etiq);
		}		
		//if cond then		  instr
		//else 	  if cond then		   instr
		(<tELSE> lista_instrucciones(at))?
		{at.code.addLabel(etiq2);}
		//else    instr
		<tEND>
	} catch (ParseException e) {
		//Set<Integer> conjSinc = infoParseException(e);
		//conjSinc.add(tEND);
		Set<Integer> conjSinc = new HashSet<Integer>();
		conjSinc.add(tEND);
		recuperacionPanico(e.currentToken.next, conjSinc);
	}
}


void inst_iteracion(Attributes at):
{
	Attributes at1 = new Attributes();
	String etiq = CGUtils.newLabel(), etiq2 = CGUtils.newLabel();
}
{
	//etiqueta 1
	//condicion
	//jump a etiqueta 2
	//bloque de codigo
	//jump a etiqueta 1
	//etiqueta 2

	try {
		<tWHILE> expresion(at1) 
		{
			sf.inst_iteracion_1(at1);

			at.code.addLabel(etiq);
			at.code.addBlock(at1.code);
			at.code.addInst(OpCode.JMF, etiq2);	

		}
		<tDO>		
		lista_instrucciones(at)
		<tEND>
		{
			at.code.addInst(OpCode.JMP, etiq);
			at.code.addLabel(etiq2);

		}
	} catch (ParseException e) {
		//Set<Integer> conjSinc = infoParseException(e);
		//conjSinc.add(tEND);
		Set<Integer> conjSinc = new HashSet<Integer>();
		conjSinc.add(tEND);
		recuperacionPanico(e.currentToken.next, conjSinc);
	}
}

//<tRETURN> expresion()
void inst_return(Attributes at):
{
	Attributes at1 = new Attributes();
	Token t;
}
{//que este en funcion y tipo funcion sea el mismo
	t = <tRETURN> 
	expresion(at1) 
	{
		sf.inst_return_1(at, at1, t);
		at.code.addBlock(at1.code);
		at.code.addInst(OpCode.CSF);
	}
}

/*	
	asignable()
	<tASSIGN>
	expresion()
*/
void inst_asignacion(Attributes at):
{
	//asinabele esta en la tabla
	//tiene el tipo correcto
	//la expresion es del mismo tipo
	Attributes at1 = new Attributes();
	Attributes at2 = new Attributes();
}
{
	asignable(at1)
	<tASSIGN>
	expresion(at2)
	{
		sf.inst_asignacion_1(at1, at2);
		at.code.addComment("asignando");
		at.code.addBlock(at1.code);
		at.code.addBlock(at2.code);
		at.code.addInst(OpCode.ASG);
	}
}

void lista_una_o_mas_asignable(Attributes at):
{
	Attributes at1 = new Attributes();	//para que compile
	at.expSize = 1;
}
{
	asignable(at1) 
	{
		at.listaCode.add(at1.code);
		at.listaTipo.add(at1.type);
		at1 = new Attributes();
	} 
	( <tC> asignable(at1) {
		at.listaCode.add(at1.code);
		at.listaTipo.add(at1.type);
		at.expSize++;
		at1 = new Attributes();
	})*
}


/*	LOOKAHEAD(2)
	<tID> <tISQBR> expresion_simple() <tESQBR>	//la posicion de un vector puede venir de una exp_simple
	| <tID>*/
void asignable(Attributes at):
{
	//Symbol s = null;
	Token t;
	Attributes at1 = new Attributes(); //compilar expresion simpel
	//SymbolArray s1 = null;
	String etiq, etiq2;
}
{
	LOOKAHEAD(2)
	t = <tID> 
	{sf.asignable_1(t, at);}
	<tISQBR> expresion_simple(at1)  <tESQBR>	//la posicion de un vector puede venir de una exp_simple
	{
		sf.asignable_2(t, at1);
		at.code.addBlock(at1.code);
		// at.code.addComment("Comprobando indice vector");
		// at.code.addInst(OpCode.DUP);
		// at.code.addInst(OpCode.STC, 0);
		// at.code.addInst(OpCode.GTE);
		// etiq = CGUtils.newLabel();
		// at.code.addInst(OpCode.JMF, etiq);
		// at.code.addInst(OpCode.DUP);
		// at.code.addInst(OpCode.STC, at.arraySize);
		// at.code.addInst(OpCode.LT);
		// etiq2 = CGUtils.newLabel();
		// at.code.addInst(OpCode.JMT, etiq2);
		
		//at.code.addLabel(etiq);
		//Comentario si esta mal
		//at.code.addComment("Mensaje error");
		
		/*at.code.addInst(OpCode.STC, 73);
		at.code.addInst(OpCode.WRT, 0);

		at.code.addInst(OpCode.STC, 110);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 100);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 101);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 120);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 32);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 111);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 117);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 116);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 32);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 111);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 102);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 32);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 98);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 111);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 117);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 110);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 100);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 115);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 32);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 102);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 111);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 114);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 32);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 97);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 114);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 114);
		at.code.addInst(OpCode.WRT, 0);

		at.code.addInst(OpCode.STC, 97);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 121);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 32);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 34);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 118);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 34);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 32);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 105);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 110);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 32);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 108);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 105);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 110);
		at.code.addInst(OpCode.WRT, 0);

		at.code.addInst(OpCode.STC, 101);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 32);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 54);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 48);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 58);
		at.code.addInst(OpCode.WRT, 0);

		at.code.addInst(OpCode.STC, 32);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 105);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 110);
		at.code.addInst(OpCode.WRT, 0);

		at.code.addInst(OpCode.STC, 100);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 101);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.STC, 120);
		at.code.addInst(OpCode.WRT, 0);

		at.code.addInst(OpCode.STC, 32);
		at.code.addInst(OpCode.WRT, 0);
		at.code.addInst(OpCode.WRT, 1);
		at.code.addInst(OpCode.LVP);



		at.code.addLabel(etiq2);*/
		at.code.addComment("Variable vector asignable " + t.image);
		at.code.addInst(OpCode.SRF, st.level - at.simbolo.nivel, (int)at.simbolo.dir);
		if(at.simbolo.parClass == Symbol.ParameterClass.REF){
			at.code.addInst(OpCode.DRF);
		}
		at.code.addInst(OpCode.PLUS);
	}
	| t = <tID>
	{
		sf.asignable_3(t, at);
		at.code.addComment("Variable " + t.image);
		at.code.addInst(OpCode.SRF, st.level - at.simbolo.nivel, (int)at.simbolo.dir);
		if(at.simbolo.parClass == Symbol.ParameterClass.REF){
			at.code.addInst(OpCode.DRF);
		}
	}
}

//put acepta todo tipo de variables
void inst_escribir(Attributes at):
{
	Token t;
	Attributes at1 = new Attributes();
	at1.indice = 0;
	//Integer i = new Integer(0);
	
}
{
	t = <tPUT> {
		sf.inst_escribir_1(t, at1);
	} 
	<tSBR> lista_una_o_mas_exps(at1) <tEBR>	//iguales pero con un salto de linea
	{
		for(int i = at1.listaCode.size() - 1; i >= 0; i--){
			at.code.addBlock(at1.listaCode.get(i));
		}

		for(int i = 0; i < at1.listaCode.size(); i++){
			for(int j = 0; j < at1.listaSize.get(i); j++){
				if(at1.listaTipo.get(i) == Symbol.Types.CHAR || at1.listaTipo.get(i) == Symbol.Types.STRING){		
					at.code.addInst (OpCode.WRT, 0);
				} else {
					at.code.addInst (OpCode.WRT, 1);
				}
			}
		}
	
	}
}

//put_line acepta todo tipo de variables
void inst_escribir_linea(Attributes at)://lista 0 a mas expresiones
{
	Token t;
	Attributes at1 = new Attributes();
	at1.indice = 0;
	//Integer i = new Integer(0);
	
}
{
	t = <tPUTL> 
	{
		sf.inst_escribir_linea_1(t, at1);
	
		//Añadir salto linea
		at.code.addComment("put_line");
		at.code.addInst (OpCode.STC, 10);
		at.code.addInst (OpCode.STC, 13);
	} 
	<tSBR> lista_cero_o_mas_exps(at1) <tEBR>
	{
		for(int i = at1.listaCode.size() - 1; i >= 0; i--){
			at.code.addBlock(at1.listaCode.get(i));

		}

		for(int i = 0; i < at1.listaCode.size(); i++){
			for(int j = 0; j < at1.listaSize.get(i); j++){
				if(at1.listaTipo.get(i) == Symbol.Types.CHAR || at1.listaTipo.get(i) == Symbol.Types.STRING){		
					at.code.addInst (OpCode.WRT, 0);
				} else {
					at.code.addInst (OpCode.WRT, 1);
				}
			}
		}
		//Salto de linea
		at.code.addInst (OpCode.WRT, 0);
		at.code.addInst (OpCode.WRT, 0);

	}
}


void inst_saltar_linea(Attributes at): 
{
	String etiq;
}
{
	<tSKIP>	<tSBR> <tEBR>
	{
		etiq = CGUtils.newLabel();
		at.code.addLabel(etiq);
		at.code.addInst(OpCode.SRF, 0, CGUtils.memorySpaces[st.level] + 1);
		at.code.addInst(OpCode.RD, 0);
		at.code.addInst(OpCode.SRF, 0, CGUtils.memorySpaces[st.level] + 1);
		at.code.addInst(OpCode.DRF);
		at.code.addInst(OpCode.STC, 10);
		at.code.addInst(OpCode.EQ);
		at.code.addInst(OpCode.JMF, etiq);

	}
}
 

void inst_leer(Attributes at): //lista de uno o mas asignables
{
	Attributes at1 = new Attributes(); 
	Token t;
}
{
	t = <tGET> <tSBR> lista_una_o_mas_asignable(at1) <tEBR>	//get (lista_var);
	{
		sf.inst_leer_1(t, at1);
		

		for(int i = at1.listaCode.size() - 1; i >= 0; i--){
			at.code.addBlock(at1.listaCode.get(i));
		}


		for(int i = 0; i < at1.expSize; i++){
			if(at1.listaTipo.get(i) == Symbol.Types.CHAR){	
				at.code.addInst (OpCode.RD, 0);
			} else {
				at.code.addInst (OpCode.RD, 1);
			}
		}
	}
}


//... skip_line() generar en c para ver que hace

void lista_cero_o_mas_exps(Attributes at):
{

}
{
	( lista_una_o_mas_exps(at) )?
}

//expresion(at1) ( <tC> expresion(at2) )*
void lista_una_o_mas_exps(Attributes at):
{
	Attributes at1 = new Attributes();
	//at1.code = at.code;
	at1.esLlamada = at.esLlamada;
}
{
	expresion(at1) 
	{    
		sf.lista_una_o_mas_exps_1(at, at1);
		
		if(at.esLlamada && at1.parClass == Symbol.ParameterClass.REF){ //Miramos la clase del parametro
			//at.code.addComment("El parametro es por referencia");
			if(at1.simbolo.type == Symbol.Types.ARRAY && !at1.interior.isEmpty()){
				//at.code.addComment("Aqui");
				at.code.addBlock(at1.interior);
			}
			at.code.addInst(OpCode.SRF, st.level - at1.simbolo.nivel, (int)at1.simbolo.dir);
			if(at1.simbolo.parClass == Symbol.ParameterClass.REF){ //Miramos la clase del argumento
				at.code.addInst(OpCode.DRF);
			}
			
			if(at1.simbolo.type == Symbol.Types.ARRAY && !at1.interior.isEmpty()){
				at.code.addInst(OpCode.PLUS);
				at1.interior.clearBlock();
			}
		}
		else if(at.esLlamada && at1.type == Symbol.Types.ARRAY){
			at1.arraySize = ((SymbolArray)at1.simbolo).maxInd;
			for(int i = 0; i <= at1.arraySize; i++){
				if(at1.simbolo.parClass == Symbol.ParameterClass.REF){	//Parametro vector val, argumento vector ref
					at.code.addInst(OpCode.SRF, st.level - at1.simbolo.nivel, (int)at1.simbolo.dir);
					at.code.addInst(OpCode.DRF);
					at.code.addInst(OpCode.STC, i);
					at.code.addInst(OpCode.PLUS);
					at.code.addInst(OpCode.DRF);
				}
				else{	//Parametro vector val, argumento vector val
					at.code.addInst(OpCode.SRF, st.level - at1.simbolo.nivel, (int)at1.simbolo.dir + i);
					at.code.addInst(OpCode.DRF);
				}
			}
		}
		else if(at.esLlamada){
			at.code.addBlock(at1.code);
		}
		

		//generar srf - drf por cada 

		//at.expSize = at.expSize + at1.expSize;
		at.listaCode.add(at1.code);
		//at1.code.clearBlock();
		at.listaTipo.add(at1.type);
		at.listaSize.add(at1.expSize);
		at1 = new Attributes();

	}
	( <tC> expresion(at1) {
		sf.lista_una_o_mas_exps_1(at, at1);

		if(at.esLlamada && at1.parClass == Symbol.ParameterClass.REF){ //Miramos la clase del parametro
			//at.code.addComment("El parametro es por referencia");
			if(at1.simbolo.type == Symbol.Types.ARRAY && !at1.interior.isEmpty()){
				//at.code.addComment("Aqui");
				at.code.addBlock(at1.interior);
			}
			at.code.addInst(OpCode.SRF, st.level - at1.simbolo.nivel, (int)at1.simbolo.dir);
			if(at1.simbolo.parClass == Symbol.ParameterClass.REF){ //Miramos la clase del argumento
				at.code.addInst(OpCode.DRF);
			}
			
			if(at1.simbolo.type == Symbol.Types.ARRAY && !at1.interior.isEmpty()){
				at.code.addInst(OpCode.PLUS);
				at1.interior.clearBlock();
			}
		}
		else if(at.esLlamada && at1.type == Symbol.Types.ARRAY){
			at1.arraySize = ((SymbolArray)at1.simbolo).maxInd;
			for(int i = 0; i <= at1.arraySize; i++){
				if(at1.simbolo.parClass == Symbol.ParameterClass.REF){	//Parametro vector val, argumento vector ref
					at.code.addInst(OpCode.SRF, st.level - at1.simbolo.nivel, (int)at1.simbolo.dir);
					at.code.addInst(OpCode.DRF);
					at.code.addInst(OpCode.STC, i);
					at.code.addInst(OpCode.PLUS);
					at.code.addInst(OpCode.DRF);
				}
				else{	//Parametro vector val, argumento vector val
					at.code.addInst(OpCode.SRF, st.level - at1.simbolo.nivel, (int)at1.simbolo.dir + i);
					at.code.addInst(OpCode.DRF);
				}
			}
		}
		else if(at.esLlamada){
			at.code.addBlock(at1.code);
		}

		//at.expSize = at.expSize + at1.expSize;
		at.listaCode.add(at1.code);
		//at1.code.clearBlock();
		
		at.listaTipo.add(at1.type);
		at.listaSize.add(at1.expSize);
		at1 = new Attributes();
	})* 
}


void expresion(Attributes at) : 
{
	Attributes at1 = new Attributes();
	Attributes at2 = new Attributes();
}
{
	expresion_simple(at) 
	( operador_relacional(at2) expresion_simple(at1) 
		{
			sf.expresion_1(at, at1);

			at.code.addBlock(at1.code);
			at.code.addBlock(at2.code);
			at1.code.clearBlock();
			at2.code.clearBlock();
		} 
	)?
}  

void operador_relacional(Attributes at):
{

}
{
	<tEQ> {at.code.addInst (OpCode.EQ);}
	| <tLESS> {at.code.addInst (OpCode.LT);}
	| <tMORE> {at.code.addInst (OpCode.GT);}
	| <tLESSEQ> {at.code.addInst (OpCode.LTE);}
	| <tMOREEQ> {at.code.addInst (OpCode.GTE);}
	| <tNOTEQ> {at.code.addInst (OpCode.NEQ);}
}

/*
(<tPOS>| <tNEG>)? termino() ( operador_aditivo(at2) termino(at3))*
*/
void expresion_simple(Attributes at): 
{
	Attributes at1 = new Attributes();
	Attributes at2 = new Attributes();
	Attributes at3 = new Attributes();
	Token t;
}
{
	((t = <tPOS>| t = <tNEG>) {
		sf.expresion_simple_1(at1);
		if(t.image == "-"){
			at1.code.addInst (OpCode.NGI);
		} 
	})? 
		
		
	termino(at)
	{
		sf.expresion_simple_2(at, at1);
		at.code.addBlock(at1.code);
	}
	 
	 ( operador_aditivo(at2) termino(at3)
	 {
		sf.expresion_simple_3(at, at2, at3);

		at.code.addBlock(at3.code);
		at.code.addBlock(at2.code);
		at2.code.clearBlock();
		at3.code.clearBlock();
	 }
	  )*
}

// <tPOS> 
// | <tNEG>
// | <tOR> 
void operador_aditivo(Attributes at):
{

}
{
	<tPOS> {at.type = Symbol.Types.INT; at.code.addInst (OpCode.PLUS);}
	| <tNEG> {at.type = Symbol.Types.INT; at.code.addInst (OpCode.SBT);}
	| <tOR> {at.type = Symbol.Types.BOOL; at.code.addInst (OpCode.OR);}
}

//factor() ( operador_multiplicativo() factor() )*
void termino(Attributes at):
{
	Attributes at1 = new Attributes();
	Attributes at2 = new Attributes();
	Attributes at3 = new Attributes();
}
{
	factor(at)
	( operador_multiplicativo(at2) factor(at3) 
	{
		sf.termino_2(at, at2, at3);

		at.code.addBlock(at3.code);
		at.code.addBlock(at2.code);
		at2.code.clearBlock();
		at3.code.clearBlock();
	})*

}

void operador_multiplicativo(Attributes at):
{

}
{
	<tMUL> {at.type = Symbol.Types.INT; at.code.addInst (OpCode.TMS);}
	| <tMOD> {at.type = Symbol.Types.INT; at.code.addInst (OpCode.MOD);}
	| <tDIV> {at.type = Symbol.Types.INT; at.code.addInst (OpCode.DIV);}
	| <tAND> {at.type = Symbol.Types.BOOL; at.code.addInst (OpCode.AND);}
}

void factor(Attributes at):
{
	Token t;
	Attributes at1 = new Attributes();
	at1.indice = 0;
	//Integer i = new Integer(0);
	String etiq, etiq2;
}
{
	<tNOT> factor(at1) 
	{
		sf.factor_1(at, at1);
		at.code.addBlock(at1.code);
		at.code.addInst(OpCode.NGB);
		at.expSize=at1.expSize;
	}//No es ni variable ni componente de vector, ponerlo
	| <tSBR> expresion(at1) <tEBR> 
	{
		sf.factor_2(at, at1);
		at.code.addBlock(at1.code);
		at.expSize=at1.expSize;
	}//Lo mismo
	| <tI2C> <tSBR> expresion(at1) <tEBR> 
	{
		sf.factor_3(at, at1);
		at.code.addBlock(at1.code);
		at.expSize=1;
	}//Lo mismo
	| <tC2I> <tSBR> expresion(at1) <tEBR> 
	{
		sf.factor_4(at, at1);
		at.code.addBlock(at1.code);
		at.expSize=1;
	}//Lo mismo
	| LOOKAHEAD(2) t = <tID> //Llamada a funcion
	{
		sf.factor_13(t, at1);
		at1.esLlamada = true;
	} 
	<tSBR> lista_cero_o_mas_exps(at1) <tEBR> 
	{
		sf.factor_5(at1, at);
		
		at.code.addBlock(at1.code);
		at.code.addOSFInst(CGUtils.memorySpaces[st.level] + 1, st.level - at1.simbolo.nivel, at1.simbolo.label);
		at.expSize=1;
	}//Lo mismo 
	| LOOKAHEAD(2)  t = <tID> <tISQBR> expresion(at1) <tESQBR> 
	{
		sf.factor_6(t, at, at1);

		at.interior.addBlock(at1.code);
		at.code.addBlock(at1.code);
		/*at.code.addComment("Comprobando indice vector");
		at.code.addInst(OpCode.DUP);
		at.code.addInst(OpCode.STC, 0);
		at.code.addInst(OpCode.GTE);
		etiq = CGUtils.newLabel();
		at.code.addInst(OpCode.JMF, etiq);
		at.code.addInst(OpCode.DUP);
		at.code.addInst(OpCode.STC, at.arraySize);
		at.code.addInst(OpCode.LT);
		etiq2 = CGUtils.newLabel();
		at.code.addInst(OpCode.JMT, etiq2);
		
		at.code.addLabel(etiq);
		//Comentario si esta mal
		at.code.addComment("Mensaje error");

		at.code.addLabel(etiq2);*/
		at.code.addComment("Variable vector factor " + t.image);
		at.code.addInst(OpCode.SRF, st.level - at.simbolo.nivel, (int)at.simbolo.dir);
		if(at.simbolo.parClass == Symbol.ParameterClass.REF){
			at.code.addInst(OpCode.DRF);
		}
		at.code.addInst(OpCode.PLUS);
		at.code.addInst(OpCode.DRF);

		at.expSize=1;

		
	}//Es componente del vector no es var
	| t = <tID> 
	{
		sf.factor_7(t, at);

		at.code.addComment("coger variable " + t.image);
		//at.simbolo
		//SRF  0  3 //Nivel actual en tabla simbolos - nivel simbolo
		//DRF
		at.code.addInst(OpCode.SRF, st.level - at.simbolo.nivel, (int)at.simbolo.dir);
		at.code.addInst(OpCode.DRF);
		if(at.simbolo.parClass == Symbol.ParameterClass.REF){
			at.code.addInst(OpCode.DRF);
		}
	
		at.expSize=1;
	}
	| t = <tVINT> 
	{
		sf.factor_8(t, at);
		at.code.addComment("coger constante entera " + t.image);
		at.expSize=1;
		at.code.addInst(OpCode.STC, at.valInt);
	
	}
	| t = <tVCHAR> {
		sf.factor_9(t, at);
		at.code.addComment("Coger caracter " + at.valChar);
		at.code.addInst (OpCode.STC, (int) at.valChar);
		at.expSize=1;
	}
	| t = <tVSTRING>
	{
		sf.factor_10(t, at);
		at.code.addComment("coger constante string "  + t.image);
		for (int i = at.valString.length() - 2; i >= 1; i--) {
			at.code.addInst (OpCode.STC, (int) at.valString.charAt(i));
		}
		at.expSize = at.valString.length() - 2;
	}
	| <tTRUE> 
	{
		sf.factor_11(at);
		at.code.addInst (OpCode.STC, 1);
		at.expSize=1;
	}
	| <tFALSE> 
	{
		sf.factor_12(at);
		at.code.addInst (OpCode.STC, 0);
		at.expSize=1;
	}
}


JAVACODE
Set<Integer> infoParseException(ParseException e){
	Set<Integer> esperados = new HashSet<Integer>();
	System.err.println("ERROR_SINT: ('" + e.currentToken.next.image + "',"
		+ e.currentToken.next.beginLine
		+ "," + e.currentToken.next.beginColumn + ")");
	System.err.println("Se esperaba uno de los siguientes tokens:");
	for(int i = 0; i < e.expectedTokenSequences.length; i++){
		esperados.add(e.expectedTokenSequences[i][0]);
		System.err.println("\t" + adac_4Constants.tokenImage[e.expectedTokenSequences[i][0]]);
	}
	return esperados;
}

JAVACODE
void recuperacionPanico(Token tInesperado, Set<Integer> conjSinc) {
	System.err.println("----> Recupero en modo panico: " + 
	"\n ----> saltando todo hasta token de conjunto de sincronizacion");
	Token t = getNextToken();
	while (!conjSinc.contains(t.kind) && t.kind != EOF) {
		System.err.println("Descartando token (" 
		+ adac_4Constants.tokenImage[t.kind]
		+ "," + t.image + ")");
		
		t = getNextToken();
	}
}