//*****************************************************************
// File:   adac.jj
// Author: ...........
// Date:   ...........
// Coms:   Un tutorial sobre el análisis léxico con javacc
//         https://javacc.github.io/javacc/tutorials/token-manager.html
//*****************************************************************

options {
//   IGNORE_CASE = false;
//   COMMON_TOKEN_ACTION = false;
//   ...
	//DEBUG_PARSER = true;
}

PARSER_BEGIN(adac)
package traductor;

import java.util.*;
import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import lib.attributes.*;
import lib.errores.*;

public class adac {

	//tabla de símbolos global
	static SymbolTable st;

	private static void initSymbolTable() {
		boolean b;
		String[] palsRes = {
	    	"var","const","escribir"
		};

		st = new SymbolTable(palsRes);
		//st.insertReservedWords(palsRes);

		//st.toString();
	}
	

    public static void main(String[] args) {
    	adac parser;

    	try {
	    	if(args.length == 0) { //entrada desde stdin
				parser = new adac(System.in);
			}
			else { //entrada desde fichero en args[0]
	            parser = new adac(new java.io.FileInputStream(args[0])); 
			}
			initSymbolTable();
			parser.programa(); //invoca símbolo inicial de la gramática
			System.out.println(st.toString());
		} catch (java.io.FileNotFoundException e) {
			System.err.println ("Fichero " + args[0] + " no encontrado.");
		} catch (TokenMgrError e) {
        	System.err.println("LEX_ERROR: " + e.getMessage());
        } 
		catch (ParseException e){
			System.err.println("PARSE_ERROR: " + e.getMessage());
		}
		catch(Exception e) {
  			System.err.println("Finalizo traducción por detección de error no controlado: \n\t"
  				               + e.getMessage());
		}
    }
}
PARSER_END(adac)

TOKEN_MGR_DECLS:
{
	static void informacion(Token t, String tipo){
		System.out.println("(" + t.beginLine + "," + t.beginColumn + "): " + tipo + " \"" + t.image + "\"");
	}
}


//------------ descripción del AL
SKIP :
{
  	" "
|	"\t"
|	"\n"
|	"\r"
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "--" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> //Ojo si no hay final fichero pilla primero como operador
}



//<WithinComment> SKIP :
//{
// "\n" : DEFAULT
//}

TOKEN :
{
 	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
|	< #ALPHANUM: (<LETTER> | <DIGIT>) >

}
//TokenManagerdecs
TOKEN :
{
 	< tBEGIN: "begin" >
 		{
			//informacion(matchedToken, "inicio funcion");
 		}
|	< tBOOL: "boolean" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "declaracion boolean");
 		}
|	< tCHAR: "character" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "declaracion character");
 		}
|	< tINT: "integer" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "declaracion integer");
 		}
//constantes tipos
|	< tVINT: (<DIGIT>)+ >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "constante entera");
 		}
|	< tVCHAR: "'"(~["\n","\r"])"'" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "constante char");
 		}
|	< tTRUE: "true" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "constante bool true");
 		}
|	< tFALSE: "false" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "constante bool false");
 		}
|	< tVSTRING: "\""(~["\n","\r","\""])*"\"" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "constante string");
 		}
//simbolos
|	< tC: "," >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "simbolo coma");
 		}
|	< tPC: ";" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "simbolo punto y coma");
 		}
|	< tSBR: "(" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "simbolo parentesis abierto");
 		}
|	< tEBR: ")" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "simbolo parentesis cerrado");
 		}
|	< tISQBR: "[" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "simbolo corchete abierto");
 		}
|	< tESQBR: "]" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "simbolo corchete cerrado");
 		}
//logica
|	< tLESS: "<" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador mayor");
 		}
|	< tMORE: ">" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador menor");
 		}
|	< tLESSEQ: "<=" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador mayor o igual");
 		}
|	< tMOREEQ: ">=" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador menor o igual");
 		}
|	< tNOTEQ: "<>" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador igual");
 		}
|	< tASSIGN: ":=" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador asignacion");
 		}
|	< tEQ: "=" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador igual");
 		}
//aritmetica
|	< tNEG: "-" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador menos");
 		}
|	< tPOS: "+" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador mas");
 		}
|	< tMUL: "*" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador multiplicar");
 		}
|	< tDIV: "div" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador division");
 		}			
|	< tMOD: "mod" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operador modulo");
 		}			  		 
//operaciones logicas
|	< tAND: "and" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "logica and");
 		}	
|	< tNOT: "not" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "logica not");
 		}	
|	< tOR: "or" >
 		{
 			//mostrar la información pedida
			//informacion(matchedToken, "logica or");
 		}	
//palabras reservadas en minusculas
|	< tPROC: "procedure" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "reservada procedure");
 		}
|	< tFUNCT: "function" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "reservada function");
 		}
|	< tRETURN: "return" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "reservada return");
 		}
|	< tVAL: "val" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "parametro por valor");
 		}
|	< tREF: "ref" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "parametro por referencia");
 		}
|	< tIS: "is" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "reservada is");
 		}
|	< tPUT: "put" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operacion put");
 		}
|	< tPUTL: "put_line" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operacion put_line");
 		}
|	< tSKIP: "skip_line" > 
		 {
			//mostrar la información pedida
			//informacion(matchedToken, "operacion skip_line");
		  }
|	< tGET: "get" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operacion get");
 		}
|	< tI2C: "int2char" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operacion int2char");
 		}
|	< tC2I: "char2int" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "operacion char2int");
 		}
|	< tEND: "end" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "reservada end");
 		}
|	< tIF: "if" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "condicion if");
 		}
|	< tELSE: "else" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "condicion else");
 		}
|	< tWHILE: "while" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "bucle while");
 		}
|	< tDO: "do" >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "reservada do");
 		}
|	< tTHEN: "then" >		{
 			//mostrar la información pedida
			//informacion(matchedToken, "reservada then");
 		}
//identificador
|	< tID: ("_"(<ALPHANUM>|<ALPHANUM>"_")* | <LETTER>("_"<ALPHANUM>|<ALPHANUM>)*("_")?) >
		{
 			//mostrar la información pedida
			//informacion(matchedToken, "identificador");
 		}

}

TOKEN:
{
	< tDEF: ~[] >		
		{
			System.out.println("ERROR LEXICO: (" + matchedToken.beginLine + "," + matchedToken.beginColumn + "): simbolo no reconocido: " + "<" + matchedToken.image + ">");			
		}
}


//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
void programa () : 
{

}
{
	<tPROC>
	<tID>
	<tIS>
	declaracion_variables()
	declaracion_procs_funcs()
	bloque_sentencias()
	
}

//( declaracion() <tPC> )*
void declaracion_variables():
{
	Attributes at1 = new Attributes();
}
{
	{at1.parClass = Symbol.ParameterClass.NONE;}
	( declaracion(at1) <tPC> )*	
	//meter variables en la tabla
	{
		for (int i=0;i<at1.parList.size();i++) {
			try{
				st.insertSymbol(at1.parList.get(i));
			}	
			catch (AlreadyDefinedSymbolException e) {
				//ErrorSemantico.deteccion(e, t1); //DE DONDE SACAMOS EL TOKEN????
			}
		}
	}
}

//tipo_variable() lista_vars()
void declaracion(Attributes at):
{
	
}
{
	at.type = tipo_variable() 
	lista_vars(at)
	
}

//<tINT> | <tCHAR> | <tBOOL>
Symbol.Types tipo_variable():
{

}
{
	<tINT> 
		{
			return Symbol.Types.INT;
		}
	| <tCHAR> 
		{
			return Symbol.Types.CHAR;
		}
	| <tBOOL>
		{
			return Symbol.Types.BOOL;
		}
}

//variable() ( <tC> variable() )*
void lista_vars(Attributes at):
{
}
{
	variable(at) ( <tC> variable(at) )*
}

/*
	LOOKAHEAD(2)
	<tID> <tISQBR> <tVINT> <tESQBR>
	| <tID>
*/
void variable(Attributes at):
{
	Token t1, t2;
	//Attributes at1 = new Attributes();
	Symbol s = null;
}
{
	LOOKAHEAD(2)
	t1 = <tID> 
	<tISQBR> 
	t2 = <tVINT> 
	<tESQBR>
	{
		//crear e instertar el simbolo
		s = new SymbolArray(t1.image, 0, Integer.parseInt(t2.image)-1,at.type,at.parClass);
		at.parList.add(s);
	}
	
	| t1 = <tID>
		{ //crear e insertar el simbolo
			if(at.type == Symbol.Types.INT){
				s = new SymbolInt(t1.image, at.parClass);
			}
			else if(at.type == Symbol.Types.CHAR){
				s = new SymbolChar(t1.image, at.parClass);
			}
			else{ //tp == Symbol.Types.BOOL
				s = new SymbolBool(t1.image, at.parClass);
			}
			//System.out.println(s.toString());
			at.parList.add(s); 
		}
		
}

void declaracion_procs_funcs():
{

}
{
	( declaracion_proc_func() )*
}

/*(<tPROC> | <tFUNCT> tipo_variable())
	declaracion_proc_func2()
*/
void declaracion_proc_func():
{
	
	Attributes at1 = new Attributes();
}
{
	(<tPROC> 
		{at1.typeProcFunc = Symbol.Types.PROCEDURE;}
	| <tFUNCT>
		{at1.typeProcFunc = Symbol.Types.FUNCTION;
		at1.type = tipo_variable();})
	
	
	declaracion_proc_func2(at1)
	
}

/*
cabecera_proc_func()
declaracion_variables()
declaracion_procs_funcs()
bloque_sentencias()
*/
void declaracion_proc_func2(Attributes at):
{
	
}
{
	cabecera_proc_func(at)
	declaracion_variables()
	declaracion_procs_funcs() //Ojito
	bloque_sentencias() //<- atributo
	{
		System.out.println(st.toString());
		st.removeBlock();
	}
}

//<tID> <tSBR> (argumentos_proc_func())? <tEBR> <tIS>
void cabecera_proc_func(Attributes at):
{
	Token t1;
	Attributes at1 = new Attributes();
	Symbol s = null;
}
{
	t1 = <tID>  
	<tSBR> 
	(argumentos_proc_func(at1))? 
	<tEBR> 
	<tIS>
	{

		if(at.typeProcFunc == Symbol.Types.PROCEDURE){
			try{
				s = new SymbolProcedure(t1.image, at1.parList) ;
				st.insertSymbol(s);
			}
			catch (AlreadyDefinedSymbolException e) {
				ErrorSemantico.deteccion(e, t1); //aqui un token??
			}
		} 
		else{
			try{
				s = new SymbolFunction(t1.image, at1.parList, at.type);
				st.insertSymbol(s);
			}
			catch (AlreadyDefinedSymbolException e) {
				ErrorSemantico.deteccion(e, t1); //aqui un token??
			}
		}
		st.insertBlock();
		
		//Insertamos los argumentos en la tabla de simbolos
		for (int i=0;i<at1.parList.size();i++) {
			try{
				st.insertSymbol(at1.parList.get(i));
			}
			catch (AlreadyDefinedSymbolException e) {
				//ErrorSemantico.deteccion(e, t1); //HABRIA QUE PONER ID DE ARGS????
			}
		}
	}
}

/*	(<tREF> | <tVAL>)
	declaracion()
	(<tPC> (<tREF> | <tVAL>) declaracion())*/
void argumentos_proc_func(Attributes at1): 
{
	
}
{
	(<tREF> 
	{at1.parClass = Symbol.ParameterClass.REF;}
	| <tVAL>
	{at1.parClass = Symbol.ParameterClass.VAL;})


	declaracion(at1)
	(<tPC> 
	
	(<tREF> 
	{at1.parClass = Symbol.ParameterClass.REF;}
	| <tVAL> 
	{at1.parClass = Symbol.ParameterClass.VAL;}) 
	declaracion(at1))*
}


//...
void bloque_sentencias():
{

}
{
	< tBEGIN> 
	lista_instrucciones()
	< tEND >
}

void instruccion():
{

}
{
	try{
		inst_escribir() <tPC> 
		| inst_escribir_linea() <tPC> 
		| inst_return() <tPC> 
		| inst_saltar_linea() <tPC> 
		| inst_leer() <tPC>
		| inst_iteracion()
		| inst_seleccion()
		| LOOKAHEAD(2)
			inst_invoc_proc() <tPC> 
		| inst_asignacion() <tPC> 
	} catch (ParseException e) {
		Set<Integer> conjSinc = infoParseException(e);
		conjSinc.add(tPC);
		recuperacionPanico(e.currentToken.next, conjSinc);
	}
}

void inst_invoc_proc(): 
{
}
{
	//funcion( )
	<tID> <tSBR> lista_cero_o_mas_exps() <tEBR>
}

void lista_instrucciones():
{

}
{
	(instruccion())*
}

void inst_seleccion():
{

}
{
	try {
		<tIF> expresion() <tTHEN> lista_instrucciones()		
		//if cond then		  instr
		//else 	  if cond then		   instr
		(<tELSE> lista_instrucciones())?
		//else    instr
		<tEND>
	} catch (ParseException e) {
		//Set<Integer> conjSinc = infoParseException(e);
		//conjSinc.add(tEND);
		Set<Integer> conjSinc = new HashSet<Integer>();
		conjSinc.add(tEND);
		recuperacionPanico(e.currentToken.next, conjSinc);
	}
}


void inst_iteracion():
{

}
{

	try {
		<tWHILE> expresion() <tDO>		
		lista_instrucciones()
		<tEND>
	} catch (ParseException e) {
		//Set<Integer> conjSinc = infoParseException(e);
		//conjSinc.add(tEND);
		Set<Integer> conjSinc = new HashSet<Integer>();
		conjSinc.add(tEND);
		recuperacionPanico(e.currentToken.next, conjSinc);
	}



}

void inst_return():
{

}
{
	<tRETURN> expresion()
}

void inst_asignacion():
{

}
{
	asignable()
	<tASSIGN>
	expresion()
}

void lista_una_o_mas_asignable():
{

}
{
	asignable() ( <tC> asignable())*
}

void asignable():
{

}
{
	LOOKAHEAD(2)
	<tID> <tISQBR> expresion_simple() <tESQBR>	//la posicion de un vector puede venir de una exp_simple
	| <tID>
}

void inst_escribir():
{

}
{
	<tPUT> <tSBR> lista_una_o_mas_exps() <tEBR>	//iguales pero con un salto ed linea
}

void inst_escribir_linea()://lista 0 a mas expresiones
{

}
{
	<tPUTL> <tSBR> lista_cero_o_mas_exps() <tEBR>
}


void inst_saltar_linea(): 
{

}
{
	<tSKIP>	<tSBR> <tEBR>
}
 

void inst_leer(): //lista de uno o mas asignables
{

}
{
	<tGET> <tSBR> lista_una_o_mas_asignable() <tEBR>	//get (lista_var);
}


//... skip_line() generar en c para ver que hace

void lista_cero_o_mas_exps():
{

}
{
	( lista_una_o_mas_exps() )?
}

void lista_una_o_mas_exps():
{
	
}
{
	expresion() ( <tC> expresion())*
}

void expresion() : 
{

}
{
	expresion_simple() ( operador_relacional() expresion_simple() )?
}  

void operador_relacional():
{

}
{
	<tEQ>
	| <tLESS>
	| <tMORE>
	| <tLESSEQ>
	| <tMOREEQ>
	| <tNOTEQ>
}

void expresion_simple(): 
{

}
{
	( <tPOS> | <tNEG> )?
	termino() ( operador_aditivo() termino() )*
}

void operador_aditivo():
{

}
{
	<tPOS>
	| <tNEG>
	| <tOR>
}

void termino():
{
	
}
{
	factor() ( operador_multiplicativo() factor() )*
}

void operador_multiplicativo():
{

}
{
	<tMUL>
	| <tMOD>
	| <tDIV>
	| <tAND>
}

void factor():
{

}
{
	<tNOT> factor()
	| <tSBR> expresion() <tEBR>
	| <tI2C> <tSBR> expresion() <tEBR>
	| <tC2I> <tSBR> expresion() <tEBR>
	| LOOKAHEAD(2)  <tID> <tSBR> lista_cero_o_mas_exps() <tEBR>
	| LOOKAHEAD(2)  <tID> <tISQBR> expresion() <tESQBR>
	| <tID>
	| <tVINT>
	| <tVCHAR>
	| <tVSTRING>
	| <tTRUE>
	| <tFALSE>
}


JAVACODE
Set<Integer> infoParseException(ParseException e){
	Set<Integer> esperados = new HashSet<Integer>();
	System.err.println("ERROR_SINT: ('" + e.currentToken.next.image + "',"
		+ e.currentToken.next.beginLine
		+ "," + e.currentToken.next.beginColumn + ")");
	System.err.println("Se esperaba uno de los siguientes tokens:");
	for(int i = 0; i < e.expectedTokenSequences.length; i++){
		esperados.add(e.expectedTokenSequences[i][0]);
		System.err.println("\t" + adacConstants.tokenImage[e.expectedTokenSequences[i][0]]);
	}
	return esperados;
}

JAVACODE
void recuperacionPanico(Token tInesperado, Set<Integer> conjSinc) {
	System.err.println("----> Recupero en modo panico: " + 
	"\n ----> saltando todo hasta token de conjunto de sincronizacion");
	Token t = getNextToken();
	while (!conjSinc.contains(t.kind) && t.kind != EOF) {
		System.err.println("Descartando token (" 
		+ adacConstants.tokenImage[t.kind]
		+ "," + t.image + ")");
		
		t = getNextToken();
	}
}