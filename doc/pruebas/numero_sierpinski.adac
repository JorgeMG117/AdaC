------------------------------------------------------------------------
--  numero_sierpiski.adac
------------------------------------------------------------------------

procedure numero_sierpiski is
    
integer numero, n, p;

------------------------------------------------------------------------

function integer pedir_entero () is

integer n;
------------------------------------------------------------------------
begin
    n := 0;
    while (n < 0) or (n mod 2 = 0) do
        put("Dame un numero k natural IMPAR: ");
        get (n);
    end
    return n;
end

------------------------------------------------------------------------

function integer exp (val integer base, exponente) is

integer sol;
------------------------------------------------------------------------
begin
    sol := 1;
    while (exponente > 0) do
        sol := sol * base;
        exponente := exponente - 1;
    end
    return sol;
end

------------------------------------------------------------------------


function boolean es_primo (val integer k) is

integer i;
boolean primo;
------------------------------------------------------------------------
begin
    i := 2;
    primo := true;
    while (i <= (k div 2)) and (primo) do
        primo := (k mod i) <> 0;
        i := i + 1;
    end
    return primo;
end
------------------------------------------------------------------------

begin

    numero := pedir_entero();
    n := 0;
    p := numero*exp(2,n) + 1;
    while (es_primo(p)) and (n < 30) do 
        n:= n + 1;
        p:=numero*exp(2,n) + 1;
    end

    if es_primo(p) then 
        put_line("El numero: ", numero, " es un posible numero de Sierpinski.");
    
    else 
        put_line("El numero: ", p, " con la forma k*2^n + 1 no es un nÃºmero primo, el ", numero, " no es un numero de Sierpinski.");
    end
end