<?xml version="1.0" encoding="UTF-8"?>
<proc>
  ENP L0
<variable_declaration>
; --- Array variable "i", type 0, size 3, level 0, address [3:5]!
; --- Array variable "j", type 0, size 3, level 0, address [6:8]!
</variable_declaration>
<procedure_q>
L1:
; --- Simple parameter "t", type 0, class 0, level 1,  address [3]!
<recover_argument_1>
; --- Recover simple val / ref variable parameter "t" (number 1).
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L2
<variable_declaration>
</variable_declaration>
L2:
<q_instruction_block>
<put>
; --- Put STRING "Valor de t: " (length 12)
; --- Standard string writing
  STC 86
  WRT  0
  STC 97
  WRT  0
  STC 108
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 116
  WRT  0
  STC 58
  WRT  0
  STC 32
  WRT  0
</put>
<put>
; --- Variable / parameter "t"
  SRF  0  3
  DRF 
; --- Put INTEGER
  WRT  1
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
  CSF 
</q_instruction_block>
</procedure_q>
<procedure_p>
L3:
; --- Simple parameter "t", type 0, class 1, level 1,  address [3]!
<recover_argument_1>
; --- Recover simple val / ref variable parameter "t" (number 1).
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L4
<variable_declaration>
</variable_declaration>
L4:
<p_instruction_block>
<put>
; --- Put STRING "Valor de t: " (length 12)
; --- Standard string writing
  STC 86
  WRT  0
  STC 97
  WRT  0
  STC 108
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 116
  WRT  0
  STC 58
  WRT  0
  STC 32
  WRT  0
</put>
<put>
; --- Variable / parameter "t"
  SRF  0  3
  DRF 
  DRF 
; --- Put INTEGER
  WRT  1
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
  CSF 
</p_instruction_block>
</procedure_p>
<procedure_r>
L5:
; --- Val array parameter "s", type 0, class 0, size 3, level 1, address [3:5]!
; --- Ref array parameter "n", type 0, class 1, size 3, level 1, address [6]!
<recover_argument_2>
; --- Recover array ref variable parameter "n" (number 2).
  SRF  0  6
  ASGI 
</recover_argument_2>
<recover_argument_1>
; --- Recover array val variable parameter "s" (number 1).
  SRF  0  5
  ASGI 
  SRF  0  4
  ASGI 
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L6
<variable_declaration>
</variable_declaration>
L6:
<r_instruction_block>
<procedure_call_q>
<argument_1>
<component_of_array_s>
; --- Array component "s", passed as argument to val parameter "t".
  STC  1
; --- Initial address of array "s"
  SRF  0  3
  PLUS 
  DRF 
</component_of_array_s>
</argument_1>
  OSF  7  1 L1
</procedure_call_q>
<procedure_call_q>
<argument_1>
<component_of_array_n>
; --- Array component "n", passed as argument to val parameter "t".
  STC  1
; --- Initial ref address of array "n"
  SRF  0  6
  DRF 
  PLUS 
  DRF 
</component_of_array_n>
</argument_1>
  OSF  7  1 L1
</procedure_call_q>
<procedure_call_p>
<argument_1>
<component_of_array_s>
; --- Array component "s", passed as argument to ref parameter "t".
  STC  1
; --- Initial address of array "s"
  SRF  0  3
  PLUS 
</component_of_array_s>
</argument_1>
  OSF  7  1 L3
</procedure_call_p>
<procedure_call_p>
<argument_1>
<component_of_array_n>
; --- Array component "n", passed as argument to ref parameter "t".
  STC  1
; --- Initial ref address of array "n"
  SRF  0  6
  DRF 
  PLUS 
</component_of_array_n>
</argument_1>
  OSF  7  1 L3
</procedure_call_p>
  CSF 
</r_instruction_block>
</procedure_r>
L0:
<proc_instruction_block>
<Assignment_to_component_of_array_i>
  STC  1
; --- Initial address of array "i"
  SRF  0  3
  PLUS 
  STC  2
  ASG 
</Assignment_to_component_of_array_i>
<Assignment_to_component_of_array_j>
  STC  1
; --- Initial address of array "j"
  SRF  0  6
  PLUS 
  STC  2
  ASG 
</Assignment_to_component_of_array_j>
<procedure_call_r>
<argument_1>
; --- Variable / parameter "i"
  SRF  0  3
  DRF 
  SRF  0  4
  DRF 
  SRF  0  5
  DRF 
</argument_1>
<argument_2>
; --- Variable / parameter "j"
  SRF  0  6
</argument_2>
  OSF  9  0 L5
</procedure_call_r>
</proc_instruction_block>
  LVP 
</proc>
