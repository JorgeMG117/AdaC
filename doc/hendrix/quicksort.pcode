<?xml version="1.0" encoding="UTF-8"?>
<qsort>
  ENP L0
<variable_declaration>
; --- Simple variable "n", type 0, level 0,  address [3]!
; --- Array variable "t", type 0, size 20, level 0, address [4:23]!
; --- Simple variable "iteraciones", type 0, level 0,  address [24]!
</variable_declaration>
<procedure_inicializar>
L1:
; --- Ref array parameter "t", type 0, class 1, size 20, level 1, address [3]!
<recover_argument_1>
; --- Recover array ref variable parameter "t" (number 1).
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L2
<variable_declaration>
; --- Simple variable "i", type 0, level 1,  address [4]!
</variable_declaration>
L2:
<inicializar_instruction_block>
<Assignment_to__simple_variable_i>
; --- Address of variable / parameter "i"
  SRF  0  4
  STC  0
  ASG 
</Assignment_to__simple_variable_i>
<while>
L3:
<condition>
; --- Variable / parameter "i"
  SRF  0  4
  DRF 
; --- Variable / parameter "n"
  SRF  1  3
  DRF 
  LT 
</condition>
  JMF L4
<while_instruction_block>
<Assignment_to_component_of_array_t>
; --- Variable / parameter "i"
  SRF  0  4
  DRF 
; --- Initial address of array "t"
  SRF  0  3
  DRF 
  PLUS 
; --- Variable / parameter "n"
  SRF  1  3
  DRF 
; --- Variable / parameter "i"
  SRF  0  4
  DRF 
  SBT 
  ASG 
</Assignment_to_component_of_array_t>
<Assignment_to__simple_variable_i>
; --- Address of variable / parameter "i"
  SRF  0  4
; --- Variable / parameter "i"
  SRF  0  4
  DRF 
  STC  1
  PLUS 
  ASG 
</Assignment_to__simple_variable_i>
</while_instruction_block>
  JMP L3
L4:
</while>
  CSF 
</inicializar_instruction_block>
</procedure_inicializar>
<procedure_mostrar>
L5:
; --- Val array parameter "t", type 0, class 0, size 20, level 1, address [3:22]!
<recover_argument_1>
; --- Recover array val variable parameter "t" (number 1).
  SRF  0 22
  ASGI 
  SRF  0 21
  ASGI 
  SRF  0 20
  ASGI 
  SRF  0 19
  ASGI 
  SRF  0 18
  ASGI 
  SRF  0 17
  ASGI 
  SRF  0 16
  ASGI 
  SRF  0 15
  ASGI 
  SRF  0 14
  ASGI 
  SRF  0 13
  ASGI 
  SRF  0 12
  ASGI 
  SRF  0 11
  ASGI 
  SRF  0 10
  ASGI 
  SRF  0  9
  ASGI 
  SRF  0  8
  ASGI 
  SRF  0  7
  ASGI 
  SRF  0  6
  ASGI 
  SRF  0  5
  ASGI 
  SRF  0  4
  ASGI 
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L6
<variable_declaration>
; --- Simple variable "i", type 0, level 1,  address [23]!
</variable_declaration>
L6:
<mostrar_instruction_block>
<Assignment_to__simple_variable_i>
; --- Address of variable / parameter "i"
  SRF  0 23
  STC  0
  ASG 
</Assignment_to__simple_variable_i>
<while>
L7:
<condition>
; --- Variable / parameter "i"
  SRF  0 23
  DRF 
; --- Variable / parameter "n"
  SRF  1  3
  DRF 
  LT 
</condition>
  JMF L8
<while_instruction_block>
<put>
<component_of_array_t>
; --- Variable / parameter "i"
  SRF  0 23
  DRF 
; --- Initial address of array "t"
  SRF  0  3
  PLUS 
  DRF 
</component_of_array_t>
; --- Put INTEGER
  WRT  1
</put>
<put>
; --- Put STRING " " (length 1)
; --- Standard string writing
  STC 32
  WRT  0
</put>
<Assignment_to__simple_variable_i>
; --- Address of variable / parameter "i"
  SRF  0 23
; --- Variable / parameter "i"
  SRF  0 23
  DRF 
  STC  1
  PLUS 
  ASG 
</Assignment_to__simple_variable_i>
</while_instruction_block>
  JMP L7
L8:
</while>
<put>
  STC 13
; --- Put CHARACTER
  WRT  0
</put>
<put>
  STC 10
; --- Put CHARACTER
  WRT  0
</put>
  CSF 
</mostrar_instruction_block>
</procedure_mostrar>
<procedure_quicksort>
L9:
; --- Ref array parameter "t", type 0, class 1, size 20, level 1, address [3]!
; --- Simple parameter "izq", type 0, class 0, level 1,  address [4]!
; --- Simple parameter "der", type 0, class 0, level 1,  address [5]!
<recover_argument_3>
; --- Recover simple val / ref variable parameter "der" (number 3).
  SRF  0  5
  ASGI 
</recover_argument_3>
<recover_argument_2>
; --- Recover simple val / ref variable parameter "izq" (number 2).
  SRF  0  4
  ASGI 
</recover_argument_2>
<recover_argument_1>
; --- Recover array ref variable parameter "t" (number 1).
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L10
<variable_declaration>
; --- Simple variable "me", type 0, level 1,  address [6]!
</variable_declaration>
L10:
<quicksort_instruction_block>
<procedure_call_mostrar>
<argument_1>
; --- Variable / parameter "t"
  SRF  0  3
  DRF 
  STC  0
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  1
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  2
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  3
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  4
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  5
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  6
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  7
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  8
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  9
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 10
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 11
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 12
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 13
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 14
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 15
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 16
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 17
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 18
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 19
  PLUS 
  DRF 
</argument_1>
  OSF  7  1 L5
</procedure_call_mostrar>
  CSF 
</quicksort_instruction_block>
</procedure_quicksort>
L0:
<qsort_instruction_block>
<Assignment_to__simple_variable_n>
; --- Address of variable / parameter "n"
  SRF  0  3
  STC 20
  ASG 
</Assignment_to__simple_variable_n>
<Assignment_to__simple_variable_iteraciones>
; --- Address of variable / parameter "iteraciones"
  SRF  0 24
  STC  0
  ASG 
</Assignment_to__simple_variable_iteraciones>
<procedure_call_inicializar>
<argument_1>
; --- Variable / parameter "t"
  SRF  0  4
</argument_1>
  OSF 25  0 L1
</procedure_call_inicializar>
<procedure_call_quicksort>
<argument_1>
; --- Variable / parameter "t"
  SRF  0  4
</argument_1>
<argument_2>
  STC  0
</argument_2>
<argument_3>
; --- Variable / parameter "n"
  SRF  0  3
  DRF 
  STC  1
  SBT 
</argument_3>
  OSF 25  0 L9
</procedure_call_quicksort>
</qsort_instruction_block>
  LVP 
</qsort>
